// আপনার আসল কনফিগারেশন কোড
const firebaseConfig = { apiKey: "AIzaSyDHx-Q59qNbc3gvkyrOuvf-vWAeBMQgJow", authDomain: "cashnet-app-c1c73.firebaseapp.com", projectId: "cashnet-app-c1c73", storageBucket: "cashnet-app-c1c73.firebasestorage.app", messagingSenderId: "615378112175", appId: "1:615378112175:web:ee599b160638a580fd4e5a", measurementId: "G-LG1B2CNTYD" };
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
const ADMIN_UID = 'vmpYSpiOQ5V1K7vVsjvLsWGSwof2';

// HTML এলিমেন্টগুলো
const authContainer = document.getElementById('auth-container'), appContainer = document.getElementById('app-container'), adminPanel = document.getElementById('admin-panel'), emailInput = document.getElementById('email'), passwordInput = document.getElementById('password'), loginBtn = document.getElementById('login-btn'), signupBtn = document.getElementById('signup-btn'), googleLoginBtn = document.getElementById('google-login-btn'), logoutBtn = document.getElementById('logout-btn'), userEmailSpan = document.getElementById('user-email'), userUidSpan = document.getElementById('user-uid'), userBalanceSpan = document.getElementById('user-balance'), messageP = document.getElementById('message'), targetUidInput = document.getElementById('target-uid'), newBalanceInput = document.getElementById('new-balance'), updateBalanceBtn = document.getElementById('update-balance-btn'), claimBonusBtn = document.getElementById('claim-bonus-btn'), tasksContainer = document.getElementById('tasks-container'), withdrawForm = document.getElementById('withdraw-form'), pendingRequestsContainer = document.getElementById('pending-requests-container');

// Auth and User Management
signupBtn.addEventListener('click', async () => { const e = emailInput.value, t = passwordInput.value, o = document.getElementById('referral-code').value.trim(); if (!e || !t) return void (messageP.textContent = "Please enter both email and password."); try { const n = await auth.createUserWithEmailAndPassword(e, t), a = n.user; await db.runTransaction(async e => { let t = 10; if (o) { const n = db.collection('users').doc(o), a = await e.get(n); if (a.exists) { const i = a.data(), s = (i.referralCount || 0) + 1, l = (i.balance || 0) + 20; e.update(n, { referralCount: s, balance: l }) } } const i = db.collection('users').doc(a.uid); e.set(i, { email: a.email, balance: t, createdAt: firebase.firestore.FieldValue.serverTimestamp(), lastBonusClaimed: null, referredBy: o || null, referralCount: 0 }) }), messageP.textContent = "Sign up successful! Please log in." } catch (e) { messageP.textContent = `Error: ${e.message}` } });
loginBtn.addEventListener('click', () => { auth.signInWithEmailAndPassword(emailInput.value, passwordInput.value).catch(e => messageP.textContent = `Error: ${e.message}`) });
googleLoginBtn.addEventListener('click', () => { const e = new firebase.auth.GoogleAuthProvider; auth.signInWithPopup(e).then(e => { const t = e.user, o = db.collection('users').doc(t.uid); o.get().then(e => { e.exists || o.set({ email: t.email, name: t.displayName, balance: 10, createdAt: firebase.firestore.FieldValue.serverTimestamp(), lastBonusClaimed: null, referredBy: null, referralCount: 0 }) }) }).catch(e => messageP.textContent = `Error: ${e.message}`) });
logoutBtn.addEventListener('click', () => auth.signOut());
updateBalanceBtn.addEventListener('click', () => { const e = targetUidInput.value, t = parseFloat(newBalanceInput.value); e && !isNaN(t) ? db.collection('users').doc(e).update({ balance: t }).then(() => messageP.textContent = "Balance updated successfully!").catch(e => messageP.textContent = `Error: ${e.message}`) : messageP.textContent = "Please enter a valid UID and balance." });

// Feature: Daily Bonus
claimBonusBtn.addEventListener('click', () => { const e = auth.currentUser; if (e) { const t = db.collection('users').doc(e.uid), o = (new Date).toISOString().split("T")[0]; t.get().then(e => { if (e.exists) { const n = e.data(); if (n.lastBonusClaimed === o) return void (messageP.textContent = "You have already claimed your daily bonus today."); const a = (n.balance || 0) + 10; t.update({ balance: a, lastBonusClaimed: o }).then(() => messageP.textContent = "Congratulations! 10 bonus points added.").catch(e => messageP.textContent = `Error: ${e.message}`) } }) } });

// Feature: Tasks System
async function loadTasks() { try { const e = await db.collection('tasks').get(); if (tasksContainer.innerHTML = "", e.empty) return void (tasksContainer.innerHTML = "<p>No tasks available right now.</p>"); e.forEach(e => { const t = e.data(), o = e.id, n = document.createElement('div'); n.className = 'task-card', n.innerHTML = `<h3>${t.title}</h3><p>${t.description}</p><p><strong>Points: ${t.points}</strong></p><button class="complete-task-btn" data-task-id="${o}" data-points="${t.points}">Complete Task</button>`, tasksContainer.appendChild(n) }), addCompleteTaskListeners() } catch (e) { console.error("Error loading tasks: ", e), tasksContainer.innerHTML = "<p>Could not load tasks.</p>" } }
function addCompleteTaskListeners() { document.querySelectorAll('.complete-task-btn').forEach(e => { e.addEventListener('click', async t => { const o = auth.currentUser; if (o) { const n = t.target.dataset.taskId, a = parseInt(t.target.dataset.points), s = db.collection('users').doc(o.uid), i = s.collection('completed_tasks').doc(n); try { if ((await i.get()).exists) return void (messageP.textContent = "You have already completed this task!"); await db.runTransaction(async e => { const t = (await e.get(s)).data().balance || 0; e.update(s, { balance: t + a }), e.set(i, { completedAt: new Date }) }), messageP.textContent = `Congratulations! ${a} points added.`, t.target.disabled = !0, t.target.textContent = "Completed" } catch (e) { console.error("Error completing task: ", e), messageP.textContent = "Could not complete the task." } } else messageP.textContent = "Please log in to complete tasks." }) }) }

// Feature: Withdrawal System
const MINIMUM_WITHDRAWAL = 500;
withdrawForm.addEventListener('submit', async e => { e.preventDefault(); const t = auth.currentUser; if (t) { const o = parseInt(document.getElementById('withdraw-amount').value), n = document.getElementById('withdraw-method').value, a = document.getElementById('account-info').value; if (o && n && a) { if (o < MINIMUM_WITHDRAWAL) return void (messageP.textContent = `Minimum withdrawal amount is ${MINIMUM_WITHDRAWAL} points.`); const s = db.collection('users').doc(t.uid); try { await db.runTransaction(async e => { const n = await e.get(s); if (!n.exists) throw new Error("User does not exist!"); const i = n.data().balance || 0; if (i < o) throw new Error("Insufficient balance."); const l = i - o; e.update(s, { balance: l }); const c = db.collection('withdraw_requests').doc(); e.set(c, { userId: t.uid, userEmail: t.email, amount: o, method: n, accountInfo: a, status: 'pending', requestedAt: new Date }) }), messageP.textContent = "Withdrawal request submitted successfully!", withdrawForm.reset() } catch (e) { messageP.textContent = `Error: ${e.message}`, console.error("Withdrawal error: ", e) } } else messageP.textContent = "Please fill all the fields." } else messageP.textContent = "Please log in first." });
function loadPendingRequests() { db.collection('withdraw_requests').where('status', '==', 'pending').orderBy('requestedAt', 'asc').onSnapshot(e => { if (pendingRequestsContainer.innerHTML = "", e.empty) return void (pendingRequestsContainer.innerHTML = "<p>No pending requests.</p>"); e.forEach(e => { const t = e.data(), o = e.id, n = document.createElement('div'); n.className = 'request-card', n.innerHTML = `<p><strong>User:</strong> ${t.userEmail}</p><p><strong>Amount:</strong> ${t.amount} points</p><p><strong>Method:</strong> ${t.method}</p><p><strong>Account:</strong> ${t.accountInfo}</p><button class="approve-btn" data-id="${o}">Approve</button><button class="reject-btn" data-id="${o}">Reject</button>`, pendingRequestsContainer.appendChild(n) }), addRequestActionListeners() }) }
function addRequestActionListeners() { document.querySelectorAll('.approve-btn').forEach(e => { e.addEventListener('click', e => { db.collection('withdraw_requests').doc(e.target.dataset.id).update({ status: 'completed' }) }) }), document.querySelectorAll('.reject-btn').forEach(e => { e.addEventListener('click', async e => { const t = db.collection('withdraw_requests').doc(e.target.dataset.id); try { await db.runTransaction(async e => { const o = await e.get(t); if (!o.exists) throw new Error("Request not found"); const n = o.data(), a = db.collection('users').doc(n.userId), s = (await e.get(a)).data().balance || 0; e.update(a, { balance: s + n.amount }), e.update(t, { status: 'rejected' }) }) } catch (e) { console.error("Rejection error: ", e) } }) }) }

// Auth State Change Listener (Main Logic)
auth.onAuthStateChanged(e => { if (e) { authContainer.style.display = 'none', appContainer.style.display = 'block', userEmailSpan.textContent = e.email, userUidSpan.textContent = e.uid, loadTasks(), db.collection('users').doc(e.uid).onSnapshot(e => { userBalanceSpan.textContent = e.exists ? e.data().balance : 'N/A' }), adminPanel.style.display = e.uid === ADMIN_UID ? 'block' : 'none', e.uid === ADMIN_UID && loadPendingRequests() } else authContainer.style.display = 'block', appContainer.style.display = 'none' });